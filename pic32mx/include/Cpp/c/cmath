// cmath standard header
#ifndef _CMATH_
#define _CMATH_
#include <yvals.h>

#ifdef _STD_USING
 #undef _STD_USING
  #include <math.h>
 #define _STD_USING

#else /* _STD_USING */
 #include <math.h>
#endif /* _STD_USING */

 #ifdef _GLOBAL_USING
_STD_BEGIN
using _CSTD abs; using _CSTD acos; using _CSTD asin;
using _CSTD atan; using _CSTD atan2; using _CSTD ceil;
using _CSTD cos; using _CSTD cosh; using _CSTD exp;
using _CSTD fabs; using _CSTD floor; using _CSTD fmod;
using _CSTD frexp; using _CSTD ldexp; using _CSTD log;
using _CSTD log10; using _CSTD modf; using _CSTD pow;
using _CSTD sin; using _CSTD sinh; using _CSTD sqrt;
using _CSTD tan; using _CSTD tanh;

using _CSTD acosf; using _CSTD asinf;
using _CSTD atanf; using _CSTD atan2f; using _CSTD ceilf;
using _CSTD cosf; using _CSTD coshf; using _CSTD expf;
using _CSTD fabsf; using _CSTD floorf; using _CSTD fmodf;
using _CSTD frexpf; using _CSTD ldexpf; using _CSTD logf;
using _CSTD log10f; using _CSTD modff; using _CSTD powf;
using _CSTD sinf; using _CSTD sinhf; using _CSTD sqrtf;
using _CSTD tanf; using _CSTD tanhf;

using _CSTD acosl; using _CSTD asinl;
using _CSTD atanl; using _CSTD atan2l; using _CSTD ceill;
using _CSTD cosl; using _CSTD coshl; using _CSTD expl;
using _CSTD fabsl; using _CSTD floorl; using _CSTD fmodl;
using _CSTD frexpl; using _CSTD ldexpl; using _CSTD logl;
using _CSTD log10l; using _CSTD modfl; using _CSTD powl;
using _CSTD sinl; using _CSTD sinhl; using _CSTD sqrtl;
using _CSTD tanl; using _CSTD tanhl;

 #if _HAS_C9X
using _CSTD float_t; using _CSTD double_t;

using _CSTD acosh; using _CSTD asinh; using _CSTD atanh;
using _CSTD cbrt; using _CSTD erf; using _CSTD erfc;
using _CSTD expm1; using _CSTD exp2;
using _CSTD hypot; using _CSTD ilogb; using _CSTD lgamma;
using _CSTD log1p; using _CSTD log2; using _CSTD logb;
using _CSTD llrint; using _CSTD lrint; using _CSTD nearbyint;
using _CSTD rint; using _CSTD llround; using _CSTD lround;
using _CSTD fdim; using _CSTD fma; using _CSTD fmax; using _CSTD fmin;
using _CSTD round; using _CSTD trunc;
using _CSTD remainder; using _CSTD remquo;
using _CSTD copysign; using _CSTD nan; using _CSTD nextafter;
using _CSTD scalbn; using _CSTD scalbln;
using _CSTD nexttoward; using _CSTD tgamma;

using _CSTD acoshf; using _CSTD asinhf; using _CSTD atanhf;
using _CSTD cbrtf; using _CSTD erff; using _CSTD erfcf;
using _CSTD expm1f; using _CSTD exp2f;
using _CSTD hypotf; using _CSTD ilogbf; using _CSTD lgammaf;
using _CSTD log1pf; using _CSTD log2f; using _CSTD logbf;
using _CSTD llrintf; using _CSTD lrintf; using _CSTD nearbyintf;
using _CSTD rintf; using _CSTD llroundf; using _CSTD lroundf;
using _CSTD fdimf; using _CSTD fmaf; using _CSTD fmaxf; using _CSTD fminf;
using _CSTD roundf; using _CSTD truncf;
using _CSTD remainderf; using _CSTD remquof;
using _CSTD copysignf; using _CSTD nanf;
using _CSTD nextafterf; using _CSTD scalbnf; using _CSTD scalblnf;
using _CSTD nexttowardf; using _CSTD tgammaf;

using _CSTD acoshl; using _CSTD asinhl; using _CSTD atanhl;
using _CSTD cbrtl; using _CSTD erfl; using _CSTD erfcl;
using _CSTD expm1l; using _CSTD exp2l;
using _CSTD hypotl; using _CSTD ilogbl; using _CSTD lgammal;
using _CSTD log1pl; using _CSTD log2l; using _CSTD logbl;
using _CSTD llrintl; using _CSTD lrintl; using _CSTD nearbyintl;
using _CSTD rintl; using _CSTD llroundl; using _CSTD lroundl;
using _CSTD fdiml; using _CSTD fmal; using _CSTD fmaxl; using _CSTD fminl;
using _CSTD roundl; using _CSTD truncl;
using _CSTD remainderl; using _CSTD remquol;
using _CSTD copysignl; using _CSTD nanl;
using _CSTD nextafterl; using _CSTD scalbnl; using _CSTD scalblnl;
using _CSTD nexttowardl; using _CSTD tgammal;

 #if _HAS_GENERIC_TEMPLATES
using _CSTD _Rc_type; using _CSTD _Rc_widened;
using _CSTD _Real_type; using _CSTD _Real_widened;
using _CSTD _Combined_type;

using _CSTD fpclassify;
using _CSTD signbit; using _CSTD isfinite; using _CSTD isinf;
using _CSTD isnan; using _CSTD isnormal;
using _CSTD isgreater; using _CSTD isgreaterequal;
using _CSTD isless; using _CSTD islessequal; using _CSTD islessgreater;
using _CSTD isunordered;
 #endif /* _HAS_GENERIC_TEMPLATES */

 #endif /* _HAS_C9X */

 #if _HAS_TR1_DECLARATIONS
using _CSTD assoc_laguerre; using _CSTD assoc_legendre; using _CSTD beta;
using _CSTD comp_ellint_1; using _CSTD comp_ellint_2;
using _CSTD comp_ellint_3; using _CSTD cyl_bessel_i;
using _CSTD cyl_bessel_j; using _CSTD cyl_bessel_k;
using _CSTD cyl_neumann; using _CSTD ellint_1;
using _CSTD ellint_2; using _CSTD ellint_3;
using _CSTD expint; using _CSTD hermite; using _CSTD laguerre;
using _CSTD legendre; using _CSTD riemann_zeta; using _CSTD sph_bessel;
using _CSTD sph_legendre; using _CSTD sph_neumann;

using _CSTD assoc_laguerref; using _CSTD assoc_legendref; using _CSTD betaf;
using _CSTD comp_ellint_1f; using _CSTD comp_ellint_2f;
using _CSTD comp_ellint_3f; using _CSTD cyl_bessel_if;
using _CSTD cyl_bessel_jf; using _CSTD cyl_bessel_kf;
using _CSTD cyl_neumannf; using _CSTD ellint_1f;
using _CSTD ellint_2f; using _CSTD ellint_3f;
using _CSTD expintf; using _CSTD hermitef;
using _CSTD laguerref; using _CSTD legendref; using _CSTD riemann_zetaf;
using _CSTD sph_besself; using _CSTD sph_legendref; using _CSTD sph_neumannf;

using _CSTD assoc_laguerrel; using _CSTD assoc_legendrel; using _CSTD betal;
using _CSTD comp_ellint_1l; using _CSTD comp_ellint_2l;
using _CSTD comp_ellint_3l; using _CSTD cyl_bessel_il;
using _CSTD cyl_bessel_jl; using _CSTD cyl_bessel_kl;
using _CSTD cyl_neumannl; using _CSTD ellint_1l;
using _CSTD ellint_2l; using _CSTD ellint_3l;
using _CSTD expintl; using _CSTD hermitel;
using _CSTD laguerrel; using _CSTD legendrel; using _CSTD riemann_zetal;
using _CSTD sph_bessell; using _CSTD sph_legendrel; using _CSTD sph_neumannl;

 #if _HAS_ADDED_FUNCTIONS
using _CSTD besseli0; using _CSTD besseli1;
using _CSTD besselj0; using _CSTD besselj1;
using _CSTD besselk0; using _CSTD besselk1;
using _CSTD bessely0; using _CSTD bessely1;
using _CSTD j0; using _CSTD j1; using _CSTD jn;
using _CSTD y0; using _CSTD y1; using _CSTD yn;

using _CSTD besseli0f; using _CSTD besseli1f;
using _CSTD besselj0f; using _CSTD besselj1f;
using _CSTD besselk0f; using _CSTD besselk1f;
using _CSTD bessely0f; using _CSTD bessely1f;
using _CSTD j0f; using _CSTD j1f; using _CSTD jnf;
using _CSTD y0f; using _CSTD y1f; using _CSTD ynf;

using _CSTD besseli0l; using _CSTD besseli1l;
using _CSTD besselj0l; using _CSTD besselj1l;
using _CSTD besselk0l; using _CSTD besselk1l;
using _CSTD bessely0l; using _CSTD bessely1l;
using _CSTD j0l; using _CSTD j1l; using _CSTD jnl;
using _CSTD y0l; using _CSTD y1l; using _CSTD ynl;
 #endif /* _HAS_ADDED_FUNCTIONS */

	namespace tr1 {
using _CSTD assoc_laguerre; using _CSTD assoc_legendre; using _CSTD beta;
using _CSTD comp_ellint_1; using _CSTD comp_ellint_2;
using _CSTD comp_ellint_3; using _CSTD cyl_bessel_i;
using _CSTD cyl_bessel_j; using _CSTD cyl_bessel_k;
using _CSTD cyl_neumann; using _CSTD ellint_1;
using _CSTD ellint_2; using _CSTD ellint_3;
using _CSTD expint; using _CSTD hermite; using _CSTD laguerre;
using _CSTD legendre; using _CSTD riemann_zeta; using _CSTD sph_bessel;
using _CSTD sph_legendre; using _CSTD sph_neumann;

using _CSTD assoc_laguerref; using _CSTD assoc_legendref; using _CSTD betaf;
using _CSTD comp_ellint_1f; using _CSTD comp_ellint_2f;
using _CSTD comp_ellint_3f; using _CSTD cyl_bessel_if;
using _CSTD cyl_bessel_jf; using _CSTD cyl_bessel_kf;
using _CSTD cyl_neumannf; using _CSTD ellint_1f;
using _CSTD ellint_2f; using _CSTD ellint_3f;
using _CSTD expintf; using _CSTD hermitef;
using _CSTD laguerref; using _CSTD legendref; using _CSTD riemann_zetaf;
using _CSTD sph_besself; using _CSTD sph_legendref; using _CSTD sph_neumannf;

using _CSTD assoc_laguerrel; using _CSTD assoc_legendrel; using _CSTD betal;
using _CSTD comp_ellint_1l; using _CSTD comp_ellint_2l;
using _CSTD comp_ellint_3l; using _CSTD cyl_bessel_il;
using _CSTD cyl_bessel_jl; using _CSTD cyl_bessel_kl;
using _CSTD cyl_neumannl; using _CSTD ellint_1l;
using _CSTD ellint_2l; using _CSTD ellint_3l;
using _CSTD expintl; using _CSTD hermitel;
using _CSTD laguerrel; using _CSTD legendrel; using _CSTD riemann_zetal;
using _CSTD sph_bessell; using _CSTD sph_legendrel; using _CSTD sph_neumannl;
	}	// namespace tr1
 #endif /* _HAS_TR1_DECLARATIONS */
_STD_END
 #endif /* _GLOBAL_USING */

#endif /* _CMATH_ */

/*
 * Copyright (c) 1992-2010 by P.J. Plauger.  ALL RIGHTS RESERVED.
 * Consult your license regarding permissions and restrictions.
V5.30:0009 */
